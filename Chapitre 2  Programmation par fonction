{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOt2Dfw8rxv42t5wkBeSR2W"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"5C3-ZAGCITE1"},"source":["<html> <img style=\"float:center; margin: 0px 0px 0px 0px;\" src=\"https://docs.google.com/uc? export=download&id=1AsKm6Gzjuvqp9RmXxjTHdbTr4eo7kHsp\" width=\"170\" align=\"left\"/> </html>\n","<h6>Faculté des Sciences de Monastir </h6>\n","<h6>Département des Sciences de l’Informatique </h6>\n","<h6>Informatique des Classes Préparatoires:  <b>MP1/PC1</b></h6>\n","<h6>Enseignant: Jaafar CHAAOURI </h6>"]},{"cell_type":"markdown","metadata":{"id":"O0nxuFbnR8ZK"},"source":["\n","<center>\n","<img src='https://docs.google.com/uc?export=download&id=1BmLEthy7KCNsnVFviFKX77zLmFhc47XZ' align='right'width=\"420\"/>\n","    \n","<figcaption>\n","\n","</figcaption></center>\n","</figure>\n","<center> <H1><b> Programmation Python<b> </H1> </center>\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"5uEukPMjlhyJ"},"source":["# **Chapitre 2 : Programmation par fonction**"]},{"cell_type":"markdown","metadata":{"id":"L8T6SEEVUxwv"},"source":["1. Les fonctions :\n","    - def\n","    - lambda\n","    - Paramètres par défaut  \n","    - Passage de paramètres simple et mutable.\n","2. Espace de nommage et portée des variables\n","3. Exceptions & gestionnaires de contexte\n","4. Exexercices\n"]},{"cell_type":"markdown","metadata":{"id":"wgRNQG8CCghO"},"source":["## 2.1. **Les Fonctions : def & lambda**\n","\n"]},{"cell_type":"markdown","metadata":{"id":"tLd51glp-tBa"},"source":["Les fonctions permettent de réutiliser des blocs de code à plusieurs endroits différents sans avoir à copier ce bloc.\n","\n","En python, les procédures sont gérées par les objets de type fonctions, avec ou sans valeur de retour.\n","\n","```python\n","def <nom fonction>(arg1, arg2, ...):\n","    <bloc d instructions>\n","    return <valeur>  # Instruction optionnelle\n","```\n","On distingue :\n","\n","- les fonctions avec `return` et les fonctions sans `return`\n","- les fonctions sans arguments (pour lesquelles `()` est vide) des fonctions avec arguments `(arg1, arg2, ...)`\n","\n","`<nom fonction>(arg1, arg2, ...)` est appelé **signature** de la fonction."]},{"cell_type":"markdown","metadata":{"id":"znSDTS5MU_dF"},"source":["- Une fonction python peut retourner plusieurs résultats :\n","il suffit de les mettre après un return.\n","\n","- Une fonction python qui ne retourne pas de résultat est de type None (pas de return)\n"]},{"cell_type":"code","metadata":{"id":"sYAASX9HUegh"},"source":["# Définition d’une fonction\n","def nom_f(paramètres):\n","    corps de la fonction"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ujADGWfzVRzt"},"source":["**Appel d’une fonction**\n","- On appelle une fonction en lui fournissant les paramètres effectifs.\n","\n","- Les paramètres effectifs doivent être conformes aux paramètres formels en terme de nombre, de type et d'ordre.\n","\n","- On appelle une fonction python:\n","    - Par son nom.\n","    - En assignant le nom de la fonction à une variable.\n","    - Dans un print.\n","    - Dans une expression en respectant la compatibilité entre les types.\n"]},{"cell_type":"code","metadata":{"id":"7OMDjnCxRd3k","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1638625383716,"user_tz":-60,"elapsed":256,"user":{"displayName":"Jaafar Chaaouri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Giv99eTD0cvO4Wvohd5FfYjfdoLuZkvuV0f7hh_5Q=s64","userId":"16971688257570499832"}},"outputId":"16bfbd37-562d-4556-dfdb-478ae4f99868"},"source":["# Exemple :\n","def f(x,y) :\n","    import math\n","    z = x**2 + math.sin(y)\n","    return z\n","result  = f(2,3)\n","result"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["4.141120008059867"]},"metadata":{},"execution_count":2}]},{"cell_type":"markdown","metadata":{"id":"acXdMnZqYHSL"},"source":["**Paramètres optionnels**: les paramètres optionnels sont associés à une valeur par\n","défaut (évaluée une seule fois au moment de la définition de la fonction).\n","Si l’argument associé au paramètre n’est pas indiqué lors de l’appel, Python utilise la valeur\n","par défaut pour substituer le paramètre optionnel."]},{"cell_type":"code","metadata":{"id":"eoN8AgZRDb1C"},"source":["def f(x, y = 6) :\n","    return x + y\n","print(f(1,3)) #4\n","print(f(3)) #9\n","print(f(y = 2, x = 1))#3"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"QJGeJau5BghB"},"source":["# Appel d’une fonction nom_f(arguments)\n","print(f(3,2)) #arguments positionnels\n","r = f(y = 2, x = 3) #arguments par mot-clé"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"caoAd-oUJXBu"},"source":["- L’instruction **return** permet de transmettre un résultat à l’appelant de la fonction en cours.\n","- Cette instruction engendre la sortie immédiate du code de la fonction et le retour vers le code appelant"]},{"cell_type":"code","metadata":{"id":"GZEAKe_GCxQy","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1635859528790,"user_tz":-60,"elapsed":295,"user":{"displayName":"Jaafar Chaaouri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Giv99eTD0cvO4Wvohd5FfYjfdoLuZkvuV0f7hh_5Q=s64","userId":"16971688257570499832"}},"outputId":"97e098cc-8e64-448c-f2fe-d57314943d28"},"source":["def f(x) :\n","    if x > 0 :\n","        return x**0.5\n","print(f(4)) #2.0\n","print(f(-4)) #None"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2.0\n","None\n"]}]},{"cell_type":"code","metadata":{"id":"9LVa8umRC83Y","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1638625257889,"user_tz":-60,"elapsed":13,"user":{"displayName":"Jaafar Chaaouri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Giv99eTD0cvO4Wvohd5FfYjfdoLuZkvuV0f7hh_5Q=s64","userId":"16971688257570499832"}},"outputId":"b553f3ef-78ac-40b4-af55-aa3885380d48"},"source":["#fonction sans paramètes\n","def f() :\n","    for i in range(10) :\n","        print(i, end=';')\n","\n","f() # appel de la fonction f"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0;1;2;3;4;5;6;7;8;9;"]}]},{"cell_type":"markdown","metadata":{"id":"gFVeXEblYQCI"},"source":["**Fonctions lambda :**\n","\n","- permet de créer une expression de type fonction. Utilisée généralement pour les\n","fonctions d’ordre supérieur : fonctions qui prennent des paramètres de type fonction\n","exemple (sorted, list.sort, min, max etc.)\n","- Python permet une syntaxe intéressante qui vous laisse définir des mini-fonctions d’une ligne à la volée. Ces fonctions dites **lambda** peuvent être employées partout où une fonction est nécessaire.\n"]},{"cell_type":"code","metadata":{"id":"ICSQ2a9MECre"},"source":["# lambda paramètres : résultat"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QYbzD984_7F1","executionInfo":{"status":"ok","timestamp":1636734889741,"user_tz":-60,"elapsed":195,"user":{"displayName":"Jaafar Chaaouri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Giv99eTD0cvO4Wvohd5FfYjfdoLuZkvuV0f7hh_5Q=s64","userId":"16971688257570499832"}},"outputId":"b0cab623-786a-4d68-e45e-69457f0549da"},"source":["# Exemple 1\n","g= lambda x: x*x\n","g(9)\n","# on peut toujours écrire la meme fonction avec def\n","def g(x) :\n","    return x*x"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["81"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","metadata":{"id":"HKffCtudEWGR","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1602173045975,"user_tz":-60,"elapsed":2185,"user":{"displayName":"Jaafar Chaaouri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgWI7ikiBsrI4mVo3VTZKtqHrg3qqqges4tWuebOw=s64","userId":"16971688257570499832"}},"outputId":"4c4e14ea-98e8-47d3-bacd-9729bc5fd261"},"source":["# Exemple 2\n","g= lambda i,j=5 : i+j\n","g(3)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["8"]},"metadata":{"tags":[]},"execution_count":26}]},{"cell_type":"markdown","metadata":{"id":"c3gjcMwHupCZ"},"source":["## 2.2 **Espace de nommage et portée des variables**\n","\n"]},{"cell_type":"markdown","metadata":{"id":"9yf51I-JCgin"},"source":["\n","\n","**Mécanisme de l'espace de nommage des variables :**\n"]},{"cell_type":"code","metadata":{"id":"0IbPQHrGCgin","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1632144928367,"user_tz":-60,"elapsed":261,"user":{"displayName":"Jaafar Chaaouri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Giv99eTD0cvO4Wvohd5FfYjfdoLuZkvuV0f7hh_5Q=s64","userId":"16971688257570499832"}},"outputId":"c4346823-b960-401d-f148-05553db32854"},"source":["def func1():\n","    a = 1\n","    print(\"Dans func1(), a =\", a)\n","\n","def func2():\n","    print(\"Dans func2(), a =\", a)\n","\n","a = 2\n","func1()\n","func2()\n","print(\"Dans l'espace englobant, a =\", a)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Dans func1(), a = 1\n","Dans func2(), a = 2\n","Dans l'espace englobant, a = 2\n"]}]},{"cell_type":"markdown","metadata":{"id":"kQKHshjGCgip"},"source":["Cet exemple montre deux comportements :\n","\n","1. Une variable définie localement à l'intérieur d'une fonction cache une variable du même nom définie dans l'espace englobant (cas de `func1()`).\n","2. Quand une variable n'est pas définie localement à l'intérieur d'une fonction, Python va chercher sa valeur dans l'espace englobant (cas de `func2()`)."]},{"cell_type":"markdown","metadata":{"id":"4ZNZETa0Cgiq"},"source":["\n","\n","**Mécanisme de portée des variables au sein des fonctions :**"]},{"cell_type":"code","metadata":{"id":"pv5F2lBtCgiq","colab":{"base_uri":"https://localhost:8080/","height":68},"executionInfo":{"status":"ok","timestamp":1579798302352,"user_tz":-60,"elapsed":1661,"user":{"displayName":"Jaafar Chaaouri","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mA4-opawK4Z_wqlRSPkY1Af9MKQW9Pm0DwTKwnPCQ=s64","userId":"16971688257570499832"}},"outputId":"81ea0590-7b31-4ab2-bde8-55a826a489b9"},"source":["def func():\n","    a = 1\n","    b = 2\n","    print('Dans  func() : a =', a)\n","\n","a = 2\n","print(\"Avant func() : a =\", a)\n","func()\n","print(\"Après func() : a =\", a)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Avant func() : a = 2\n","Dans  func() : a = 1\n","Après func() : a = 2\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"VoeQ-I2lCgis"},"source":["Les variables définies localement à l'intérieur d'une fonction sont détruites à la sortie de cette fonction. Ici, la variable ``b`` n'existe pas hors de la fonction ``func()``, donc Python renvoie une erreur si on essaye d'utiliser ``b`` depuis l'espace englobant :"]},{"cell_type":"code","metadata":{"id":"KJzw5zgZCgis"},"source":["# Cette cellule génère une erreur\n","print(b)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xXsz87jiVq5O"},"source":["**Passage des paramètres :**\n","- Le passage des paramètre en python mime le comportement du mode de **passage par valeur** si les paramètres sont de types **non mutables**.\n","\n","- Le passage des paramètre en python mime le comportement du mode de **passage par référence**  si les paramètres sont de types **mutables**.\n","\n"]},{"cell_type":"code","metadata":{"id":"CJItfKO3cP--"},"source":[],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"v1AinhSTyF08"},"source":["## 2.3. **Gestion des exceptions**"]},{"cell_type":"markdown","metadata":{"id":"32ocgbSU-AsJ"},"source":["\n","Les exceptions sont des objets spéciaux permettant de représenter une erreur d’exécution dans un script Python.\n","\n","Il existe plusieurs types d’erreurs : TypeError, ValueError, IndexError.\n","\n","Ces derniers sont des classes Python héritant toutes de la\n","classe de base **Exception** permettant de représenter une Erreur quelconque."]},{"cell_type":"code","metadata":{"id":"VfMKy9wW-Ond"},"source":["# Déclencher une exception\n","raise Exception(\"message\")\n","# ou bien\n","raise Exception()\n","# Exemple :\n","raise TypeError(\" entier attendu ! \")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"A34B_-4D-gge"},"source":["# Prévoir une exception\n","if cond_erreur :\n","    raise Exception(\"message\")\n","# ou bien\n","assert not cond_erreur, \" message \""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"2kBHVyh6-x7j"},"source":["# Intercepter une exception\n","try :\n","    bloc_ risqué\n","except :\n","    bloc_cas_erreur\n","else :\n","    bloc_cas_pas_erreur\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"dNoxSkuunMRV"},"source":["- Le code contenu de la clause else sera exécuté dans le cas où aucune exception n’a été levée par la clause try.\n","- Il est considéré comme une bonne pratique de placer le code “non problématique” dans la clause else plutôt que dans la clause try.\n"]},{"cell_type":"code","metadata":{"id":"GLVHqjgD_COO"},"source":["# Exemple 1:\n","# saisie d’un entier positif (avec gestion d’erreur)\n","def f() :\n","    while True:\n","        try:\n","            x = int(input(\"x = \"))\n","        except:\n","            print('erreur !' )\n","        else :\n","            if x > 0 :\n","                return x"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"9rQ5gy9Ce4sZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1632925986606,"user_tz":-60,"elapsed":68057,"user":{"displayName":"Jaafar Chaaouri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Giv99eTD0cvO4Wvohd5FfYjfdoLuZkvuV0f7hh_5Q=s64","userId":"16971688257570499832"}},"outputId":"438a078d-c0ec-4af7-e40d-6ea49a1e056a"},"source":["f()"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["x = a\n","erreur !\n","x = -1\n","x = 5\n"]},{"output_type":"execute_result","data":{"text/plain":["5"]},"metadata":{},"execution_count":3}]},{"cell_type":"code","metadata":{"id":"6Xl-gvvHlZA3"},"source":["# Exemple 2:\n","try :\n","    a = int(input('Veuillez saisir le numérateur'))\n","    b = int(input('Veuillez saisir le dénominateur'))\n","    c= a/b\n","except ZeroDivisionError :\n","    print('Pas de division par zéro')\n","except ValueError:\n","    print('la valeur entrée n\\'est pas un entier valide')\n","else :\n","    print('le résultat est :',c)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Zw00OSIsBlww"},"source":["<img style=\"float:center; margin: 0px 0px 0px 0px;\" src=\"https://docs.google.com/uc? export=download&id=1RBVUooHyBb7ad1T7MyNPXtGF3CyN_agN\" width=\"130\" align=\"left\"/>\n","## 2.5 **Exercices : Les fonctions**"]},{"cell_type":"markdown","metadata":{"id":"rJfM2HaoBlwx"},"source":["#### **Exercice 1:**\n"]},{"cell_type":"markdown","metadata":{"id":"kxPaCH06Blwy"},"source":["Ecrire une fonction Python **pgcd(a,b)** qui retourne le pgcd (le plus grand commun diviseur ) de deux entiers positifs a et b.\n","\n","        Exemple:   a=75 , b=30     ⇒     pgcd =15\n"]},{"cell_type":"code","metadata":{"id":"iahWm8pn4UJ1"},"source":["\"\"\"\n","Exercice: PGCD de deux entiers a et b\n","Ecrire un programme Python qui calcul le pgcd (le plus grand commun diviseur )\n","de deux entiers positifs a et b.\n","\"\"\"\n","def pgcd(a,b):\n","\n","    a,b=min(a,b),max(a,b)# a reçoit la valeur minimale entre a et b reçoit\n","    # la valeur maximale entre a et b.\n","    # tous les diviseurs commun sont compris entre 1 et a\n","    for i in range(a,0,-1):  # on parcourt l'intervalle de a à 1 avec pas = -1\n","        if a % i == 0 and b % i == 0:\n","            return i\n","            #on sort de la boucle et de la fonction avec le premier diviseur commun trouvé"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CfP90Y0C5e_q","executionInfo":{"status":"ok","timestamp":1638629100078,"user_tz":-60,"elapsed":7,"user":{"displayName":"Jaafar Chaaouri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Giv99eTD0cvO4Wvohd5FfYjfdoLuZkvuV0f7hh_5Q=s64","userId":"16971688257570499832"}},"outputId":"222d3480-9736-4b53-847f-d2416c2ccac7"},"source":["print(\"le pgcd est:\",pgcd(75,30)) # le pgcd est le dernier reste non nul."],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["le pgcd est: 15\n"]}]},{"cell_type":"code","metadata":{"id":"yzaJfg-7Blwz"},"source":["\"\"\"\n","Solution  2 : Méthode d’Euclide : pgcd(a,b)= pgcd(b,a%b)\n","\"\"\"\n","def pgcd(a,b):\n","\n","    a,b=min(a,b),max(a,b)# a reçoit la valeur minimale entre a et b,\n","    # b reçoit la valeur maximale entre a et b.\n","    #tous les diviseurs commun sont compris entre 1 et a\n","\n","    r=a % b # on calcule le reste de a sur b\n","    while r!=0:# on repete le processus jusqu'un reste nul\n","        a=b # on remlace a par b\n","        b=r # on remplace b par r\n","        r=a % b # on recalcule le reste de a sur b\n","    return b"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6HSbKnfc5_dn","executionInfo":{"status":"ok","timestamp":1638629120772,"user_tz":-60,"elapsed":198,"user":{"displayName":"Jaafar Chaaouri","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Giv99eTD0cvO4Wvohd5FfYjfdoLuZkvuV0f7hh_5Q=s64","userId":"16971688257570499832"}},"outputId":"8e7e4144-6f6c-406d-f646-7c0e496588b8"},"source":["print(\"le pgcd est:\",pgcd(75,30)) # le pgcd est le dernier reste non nul."],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["le pgcd est: 15\n"]}]},{"cell_type":"markdown","metadata":{"id":"_FGgOQzLBlw0"},"source":["#### **Exercice 2:**"]},{"cell_type":"markdown","metadata":{"id":"lVFMRK43Blw1"},"source":["Ecrire une fonction Python **Fibonacci(n)** qui affiche tous les termes de la suite de Fibonacci inférieur ou égale à n, n un entier positif passé en paramètre.\n","La suite de Fibonacci est définie comme suite:\n","\n","\tF0 = 0\n","\tF1 = 1\n","\tFn+2= Fn+1 + Fn\n","\n","\n","```\n","Exemple:  Fibonacci(6)  : \tF0= 0,  F1= 1 , F2= 1, F3= 2, F4= 3, F5= 5, F6= 8  \n","```\n","\n"]},{"cell_type":"code","metadata":{"id":"N6jrEcmABlw1"},"source":["def Fibonacci(n):\n","    F0=0 # on stock dans F0 la valeur de F0=0\n","    F1=1 #on stock dans F1 la valeur de F1=1\n","\n","    if n==0:\n","        print(\"F0=\",F0)\n","    if n>=1:\n","        print(\"F0=\",F0)\n","        print(\"F1=\",F1)\n","\n","    for i in range(2,n+1):\n","        Fi=F0+F1 # Fi est le nouveau terme à calculer\n","        print(\"F\",i,\"= \",Fi) #affichage des termes de la suite\n","        F0=F1  # on met dans F0 l'avant dernier terme trouvé\n","        F1=Fi  # on met dans F1 le dernier terme trouvé\n","\n","\n","n=int(input(\"Donner un entier positif n:\"))\n","Fibonacci(n)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JSeLwnZIBlw2"},"source":["#### **Exercice 3:**"]},{"cell_type":"markdown","metadata":{"id":"pflfSXhEBlw3"},"source":["Ecrire  une fonction Python **Armstrong(n)** qui retourne **True** si n est un nombre de Armstrong ou **False** sinon, avec n un entier positif passé en paramètre.\n","Un nombre de Armstrong est un entier positif égale à la somme des cubes de ses chiffres.\n","Exemple:\n","\n","$153 = 1^3+ 5^3+ 3^3$= $1 + 125 + 27 $\n","==> 153 est un nombre de Armstrong\n","\n","Armstrong(153) ⇒   True\n"]},{"cell_type":"code","metadata":{"id":"uSm8xbkNBlw3"},"source":["\"\"\"\n","Fonction Armstrong(n) qui retourne True si n est un nombre de Armstrong ou False sinon,\n","avec n un entier positif passé en paramètre.\n","Un nombre de Armstrong est un entier positif égale à la somme des cubes de ses chiffres.\n","\"\"\"\n","\n","def Armstrong(n):\n","    s=0\n","    tmp=n        # tmp une variable de travail\n","    while(tmp!=0):\n","        r=tmp % 10\n","        tmp=tmp // 10\n","        s+=r**3\n","    if s==n:\n","        return True\n","    else:\n","        return False\n","\n","print(Armstrong(int(input(\"donner un entier\"))))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"bwW6KhyzBlw4"},"source":["#### **Exercice 4:**"]},{"cell_type":"markdown","metadata":{"id":"At3Uy3btBlw4"},"source":["Nombres Armstrong inférieur à n\n","Ecrire une fonction Python **Nombres_Armstrong(n)** qui affiche tous les nombres de Armstrong inférieur ou égale à n, n est un entier positif passé en paramètre. ``` Nombres_armstrong(1000) ⇒  1, 153, 370, 371, 407 ```\n"]},{"cell_type":"code","metadata":{"id":"JYUmvcLbBlw5"},"source":["\"\"\"\n","Exercice: Nombres Armstrong inférieur à n\n","Fonction Python Nombres_Armstrong(n) qui affiche tous les nombres de Armstrong inférieur ou égale à n,\n","n est un entier positif passé en paramètre.\n","Un nombre de Armstrong est un entier positif égale à la somme des cubes de ses chiffres.\n","\"\"\"\n","\n","def Nombres_armstrong(n):\n","\n","    for i in range(1,n+1):\n","        if Armstrong(i):\n","            print(i)\n","\n","\n","print(Nombres_armstrong(1000))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"OSU6XYPtBlw6"},"source":["#### **Exercice 5:**"]},{"cell_type":"markdown","metadata":{"id":"s_0gt_ZcBlw6"},"source":["Ecrire une fonction Python **nombres_amicaux(n)** qui affiche tous les nombre amicaux inférieur ou égale à n, n entier positif passé en paramètre. a et b deux entiers positifs sont dits amicaux ou amiables ou aimables si chacun des deux nombres est égal à la somme des diviseurs stricts de l'autre (diviseurs autres que lui-même).\n","```\n","Exemple:\n","la somme des diviseurs de 220 (en excluant 220) : 1+2+4+5+10+11+20+22+44+55+110=284\n","la somme des diviseurs de 284(en excluant 284) : 1+2+4+71+142=284\n","\n","```\n","\n"]},{"cell_type":"code","metadata":{"id":"hlpedhGuBlw7"},"source":["def somme_diviseur(n):#somme_diviseur(n) retourne la somme des diviseurs d'un entier n\n","    s=0\n","    for i in range(1,n+1):\n","        if n%i==0:s=s+i\n","    return s\n","\n","def amicaux(a,b): #retourne True si a et b sont deux entiers amicaux\n","\n","    sda = somme_diviseur(a)-a # sda reçoit la somme des diviseurs de a en excluant a\n","    sdb = somme_diviseur(b)-b # sda reçoit la somme des diviseurs de a en excluant a\n","\n","    if sda == b and sdb == a :\n","        return True\n","    else:\n","        return False\n","\n","def nombres_amicaux(n):\n","    i=1\n","    while i<=n:\n","        a,b=i,somme_diviseur(i)-i\n","        #reçoit i et b reçoit la somme des diviseur de a en excluant a\n","        if amicaux(a,b):# si a et b sont amicaux\n","            print(i,\"et\",somme_diviseur(i)-i)\n","            i=b+1\n","        else:\n","            i+=1"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hV72zpwQBlw_"},"source":["#### **Exercice 8:** Chaines Palindromes"]},{"cell_type":"markdown","metadata":{"id":"htHvAto0Blw_"},"source":["\n","Ecrire une fonction **Palindrome (ch)** qui a en paramètre une chaine de caractères et qui vérifie si elle est palindrome ou non.\n","On appelle palindrome une suite de caractères qui se lit de la même façon dans les deux sens.\n","\n","Exemples : \"laval \", \"ressasser\", \"engage le jeu que je le gagne\"\n","."]},{"cell_type":"code","metadata":{"id":"KJ_W-qpfBlxA"},"source":["#1ère méthode\n","def palindrome(chaine):\n","\n","    for i in range(len(chaine)//2):\n","        if chaine[i] != chaine[-1-i]:\n","              return False\n","\n","    return True\n","\n","#2ème méthode\n","def palindrome(chaine):\n","\n","    chaine_inverse=chaine[::-1]\n","    if chaine_inverse==chaine:\n","        return True\n","    else\n","    return False\n","\n","chaine=input(\"Donner un mot:\")\n","\n","if palindrome(chaine):\n","    print (\"Palindrome.\")\n","else:\n","    print (\"Pas palindrome.\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"TMFRkfo2BlxA"},"source":["#### **Exercice 9:**"]},{"cell_type":"markdown","metadata":{"id":"enYAL2jMBlxB"},"source":["Convertir une chaine en majuscule\n","Ecrire une fonction **Convertir_Majuscule (ch)** qui a en paramètre une chaine de caractères et qui transforme toutes les minuscules de la chaine en majuscules. (Sans utiliser la méthode upper())\n"]},{"cell_type":"code","metadata":{"id":"eePNwCnKBlxB"},"source":["\"\"\"\n","N.B:\n","\n","on peut penser à travailler avec les codage d’ASCII des caractères sachant que les caractères de ‘a’ à ‘z’ sont rangés dans l’ordre alphabétique et leurs code varient de 97 à 122, les caractères de ‘A’ à ‘Z’ de 65 à 90.\n","La fonction ord(c) permet de récupérer le code ASCII du caractère c\n","La fonction chr(code) permet de récupérer le caractère du code ASCII code\n","\n","\"\"\"\n","def majuscule( ch ) :\n","    ch_majuscule=\"\" # initialisation de la chaine résultat \"la chaine qui contiendra ch en majuscule\"\n","\n","    for c in ch:#parcourt de la chaine ch\n","        # c_maj est le caractère qui contiendra le caractère c en majuscule\n","        c_maj=c  # on considère que c est en majuscule ou il n'est pas une lettres\n","        if 'a'<=c<='z':# on teste si le caractère c est une lettre minuscule\n","            code_ascii=ord(c)# on récupère le code ASCII du caractère c\n","            c_maj=chr(code_ascii-32)# on soustrait 32 (car la différence, en code ASCII, entre une lettre miniscule et celle majuscule est 32 exemple: le code ASCII de 'a' est 97 et ce de 'A' est 65 et ainsi de suite\n","\n","        ch_majuscule+=c_maj\n","\n","    return ch_majuscule"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"nLwgCEMNBlxD"},"source":["#### **Exercice 10:**"]},{"cell_type":"markdown","metadata":{"id":"9k76RYJWBlxE"},"source":["Ecrire une fonction **Supprimer_voyelle (ch)** qui a en paramètre une chaine de caractères et qui supprime toutes les voyelles"]},{"cell_type":"code","metadata":{"id":"08INopOlBlxE"},"source":["#1ère méthode\n","def supprimer_voyelles(ch):\n","    voyelles = ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n","    listch = list(ch)\n","    ch = \"\"\n","    for t in listch:\n","        if t not in voyelles:\n","            ch += t\n","    return ch\n","\n","#2ème méthode\n","def supprimer_voyelles(ch):\n","    voyelles=('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n","    for c in ch:\n","        if c in voyelles:\n","            i=ch.index(c)\n","            ch=ch[:i]+ch[i+1:]\n","    return ch\n","\n","ch=input(\"donner une chaine:\")\n","print(supprimer_voyelles(ch))"],"execution_count":null,"outputs":[]}]}